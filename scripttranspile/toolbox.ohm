Basics {
  Main = Name+
  Name (Name) = firstletter followletter*
  firstletter = idletter | "_"
  followletter = digit | firstletter

  idletter = "A" .."Z" | "a" .. "z"

  verbatim =     | "❮" verbatiminnards "❯"

  verbatiminnards =
    | "❮" verbatiminnards "❯" -- rec
    | stuff+           -- bottom

  stuff = ~vsep any
  vsep = bracket
  bracket = "❮" | "❯" 

  string = 
    | sq (~sq any)* sq
    | dq (~dq any)* dq

  sq = "'"
  dq = "\""

  number = digit+

}

Names <: Basics {
  ModuleName = "=" Name
  PrototypeName = "$" Name
  FieldPrototypeName = "." Name
  FunctionName = "λ" Name
  ParameterName = "▹" Name
  SymbolName = "◦" Name
  LocalName = "~" Name
  FieldName = Name
}

Operands <: Names {
  Operand =
    | Undefined
    | ObjectConstructor
    | SymbolName
    | Dotted
    | ParameterName
    | LocalName
    | FunctionName
    | CompoundObject
    | string
    | number
    | verbatim
    | "%yes"
    | "%no"

  ObjectConstructor = "@" Name
  Undefined = "-"
  CompoundObject = ObjectArray | Dict
  ObjectArray = "[" Operand* "]"
  Dict = "{" KeyOperandPair* "}"
  KeyOperandPair = Key Operand
  Key = SymbolName
  Dotted = Operand "." Field
  Field = FunctionName | ParameterName | LocalName | FieldName
}

Operators <: Operands {
  Operation =
    | "%switch" Operand Case+ "%end" "switch" Operand -- switch
    | "%call" Operand ObjectArray -- call
    | "%overwrite" Operand Operand -- overwrite
    | "%mapλ" Operand -- map
    | "%cond" CondClause+ CondElse "%end" "cond" -- cond
    | "%yield" -- yield
    | "%scope" LocalName Expression "%end" "scope" LocalName -- scope

   Module = "%module" ModuleName Prototype Function+ "%end" "module" ModuleName -- module
   Function = "%function" FunctionName Args Operation* "%end" "function" FunctionName -- function
   Prototype = "%prototype" PrototypeName PersistentFieldDecl+ ConstructorDecl "%end" "prototype" PrototypeName
   PersistentFieldDecl = "%persistent" FieldPrototypeName Operand
   ConstructorDecl = "%constructor" "[" "▹self" "]" Operation* "%end" "constructor"
   Case = "%case" SymbolName Operation+ "%end" "case" SymbolName  -- case
   CondClause = "%condif" Operand ObjectArray Operation+ "%end" "condif" Operand
   CondElse = "%condelse" Operation+ "%end" "condelse"
   Expression =
     | "%cons" ObjectArray -- cons
     | Operand -- simple
   Args = "[" ParameterName* "]"
}


Toolbox <: Operators {
  Main := Module
}



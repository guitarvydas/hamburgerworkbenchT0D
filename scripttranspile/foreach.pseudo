%constructor foreach_0
  %persistent «state» 'idle'
  %persistent «exitstack» []
  %persistent «handler» &«fforeach_0_handler»
  %persistent «outputqueue» []


%function «fforeach_0_handler» ({«args.self» «args.message»})
  %switch «state»
    %case 'idle'
      %invokefunction &«fidlehandler» ({«args.self» «args.message»})
    %endcase 'idle'
    %case 'generating'
      %invokefunction &«fgeneratinghandler» ({«args.self» «args.message»})
    %endcase 'generating'
    %case 'blocked'
      %invokefunction &«fblockedhandler» ({«args.self» «args.message»})
    %endcase 'blocked'

  %function «fidleenter» ()
    %invokeproc «exitstack»!push (&«fidleexit»)
    %overwrite «files» ❮list files '/Users/tarvydas/temp/ps/@book-Hamburger Workbench - A Frivolous Introduction to Ohm-JS'❯
  %endfunction «fidleenter»
  %function «fidleexit» () %endfunction «fidleexit»
  %function «fidlehandler» ({«args.self» «args.message»})
    %switch «args.message»/etag
      %case 'begin'
        %mapfunctions «exitstack»
        %overwrite «state» 'generating'
        %invokefunction &«fgeneratingenter» ()
      %endcase 'begin'
    %endswitch «args.message»/etag
  %endfunction «fidlehandler»

  %function «fgeneratingenter» ()
    %invokeproc «exitstack»!push (&«fgeneratingexit»)
    %cond
      %condif «files»?empty
          %mapfunctions «exitstack»
          %overwrite «state» 'idle'
          %invokefunction &«fidledenter» ()
          %yield
      %endcondif «files»?empty
      %condelse
            %scope «subenv» «subenv»  «env»!cons («files»/pop)
              %invokeproc «outputqueue»!enqueue («subenv»)
            %endscope «subenv»
            %invokeproc «outputqueue»!enqueue ({'kick' ❮trigger❯})
            %mapfunctions «exitstack»
            %overwrite «state» 'blocked'
            %invokefunction &«fblockedenter» ()
     %endcondelse
   %endcond
  %endfunction «fgeneratingenter»

  %function «fgeneratingexit» () %endfunction «fgeneratingexit»
  %function «fgeneratinghandler» ({«args.self» «args.message»}) %endfunction «fgeneratinghandler»

  %function «fblockedenter» ()
      %invokeproc «exitstack»!push (&«fblockedexit»)
  %endfunction «fblockedenter»
  %function «fblockedexit» ()
  %endfunction «fblockedexit»
  %function «fblockedhandler» ({«args.self» «args.message»})
      %switch «message»/etag
        %case 'resume'
          %mapfunctions «exitstack»
          %overwrite «state» 'generating'
          %invokefunction &«fgeneratingenter» ()
        %endcase 'resume'
      %endswitch «message»/etag
  %endfunction «fblockedhandler»
  
%endconstructor foreach_0
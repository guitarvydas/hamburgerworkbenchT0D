pseudo {

Main = Operator+

Operator =
  | "%constructor" NameDef -- constructor
  | "%endconstructor" NameRef   -- endconstructor
  | "%persistent" VariableNameDef Operand -- persistent
  | "%function" FunctionNameDef Formals Operator+ -- function
  | "%endfunction"  FunctionNameRef            -- endfunction
  | "%switch" Operand Case+ -- switch
  | "%endswitch" Operand -- endswitch
  //| Case -- case
  //| "%endcase" Operand -- endcase
  | "%invoke" EA Args -- invoke
  | "%overwrite" VariableNameRef Operand -- overwrite
  | "%mapfunctions" ListNameRef -- mapfunctions
  | "%verbatim" verbatim -- verbatim
  | "%scope" VariableNameDef VariableNameDef Operand Operator+ -- scope
  | "%endscope" VariableNameRef -- endscope
  | "%eval" Operand -- eval
  | "%cond" CondIf* CondElse? "%endcond" -- cond
  | "%yield" -- yield

Formals =
  | "(" "{" VariableNameDef+ "}" ")" -- collection
  | "(" VariableNameDef ")" -- single
  | "(" ")" -- noformals

Args =
  | "(" Operand ")" -- onearg
  | "(" ")" -- noargs

Case = "%case" Operand Operator+ "%endcase" Operand
CondIf = "%condif" Operand Operator+ "%endcondif" Operand
CondElse = "%condelse" Operator+ "%endcondelse"

Operand =
  | Variable "/" Name         -- attribute
  | Variable "@" Name         -- impurefunction
  | Variable "!" Name "(" Operand ")" -- proc1arg
  | Variable "!" Name "(" ")" -- proc0arg
  | Variable "?" Name         -- predicate
  | VariableNameRef           -- varref
  | EA                        -- effectiveaddress
  | "[" Operand+ "]"          -- list
  | "[" "]"                   -- emptylist
  | "*yes*"                    -- yes  
  | "*no*"                     -- no
  | "{" Operand+ "}"          -- synchronouscollection
  | string                    -- string
  | verbatim                  -- verbatim

EA = "&" Operand

Variable = 
  | "«" Name "»" 

VariableNameDef = Variable
VariableNameRef = Variable
ListNameRef = Variable

operandkeyword = "*yes*" | "*no*"
operandkeywordlefthandle = "*"
operatorlefthandle = "%"
lefthandle = operatorlefthandle | operandkeywordlefthandle
Name = firstletter followletter*
firstletter = letter | "_" | "." | "λ"
followletter = alnum | firstletter

NameDef = Name
NameRef = Name

verbatim =
  | "❮" verbatim "❯" -- rec
  | stuff+           -- bottom
  
stuff = ~vsep any
vsep = bracket | lefthandle
bracket = "❮" | "❯" | "«" | "»" | "(" | ")" | "{" | "}"

string = 
  | sq (~sq any)* sq
  | dq (~dq any)* dq

sq = "'"
dq = "\""

// I'm undecided about whether function names should look like variable
// names or unadorned names...
// (I tried using λ as a prefix, but it looked too busy (I'm probably
// still stuck in the mindset of evaluating appearances based on
// human readability))
FunctionNameDef = Variable
FunctionNameRef = Variable

}



%prototype foreach_0
  %persistent «state» 'idle'
  %persistent «exitstack» []
  %persistent «handler» &«fforeach_0_handler»
  %persistent «outputqueue» []
  %persistent «env» {}

  %persistent «files» []

  %invokefunction &«fidleenter» ()
%endprototype foreach_0

%function «fforeach_0_handler» ({«args.self» «args.message»})
  %switch «state»
    %case 'idle'
      %invokefunction &«fidlestate» ({«args.self» «args.message»})
    %endcase 'idle'
    %case 'generating'
      %invokefunction &«fgeneratingstate» ({«args.self» «args.message»})
    %endcase 'generating'
    %case 'blocked'
      %invokefunction &«fblockedstate» ({«args.self» «args.message»})
    %endcase 'blocked'
  %endswitch «state»
%endfunction «fforeach_0_handler»

%function «fidleenter» ()
  %invokeproc «exitstack»!push (&«fidleexit»)
  %overwrite «files» ❮list files '/Users/tarvydas/temp/ps/@book-Hamburger Workbench - A Frivolous Introduction to Ohm-JS'❯
%endfunction «fidleenter»
%function «fidleexit» () %endfunction «fidleexit»
%function «fidlemessagehandler» ({«args.self» «args.message»})
  %switch «args.message»/etag
    %case 'env'
      %overwrite «env» «args.message»/data
    %endcase 'env'
    %case 'begin'
      %mapfunctions «exitstack»
      %overwrite «state» 'generating'
      %invokefunction &«fgeneratingenter» ()
    %endcase 'begin'
  %endswitch «args.message»/etag
%endfunction «fidlemessagehandler»

%function «fgeneratingenter» ()
  %invokeproc «exitstack»!push (&«fgeneratingexit»)
  %cond
    %condif «files»?empty
	%mapfunctions «exitstack»
	%overwrite «state» 'idle'
	%invokefunction &«fidledenter» ()
	%yield
    %endcondif «files»?empty
    %condelse
	  %scope «subenv» «subenv»  «env»!cons («files»/pop)
	    %invokeproc «outputqueue»!enqueue ({'env' «subenv»})
	  %endscope «subenv»
	  %invokeproc «outputqueue»!enqueue ({'kick' ❮trigger❯})
	  %mapfunctions «exitstack»
	  %overwrite «state» 'blocked'
	  %invokefunction &«fblockedenter» ()
   %endcondelse
 %endcond
%endfunction «fgeneratingenter»

%function «fgeneratingexit» () %endfunction «fgeneratingexit»
%function «fgeneratingmessagehandler» ({«args.self» «args.message»})
  %switch «message»/etag
    %case 'env'
      %overwrite «state» «args.message»/data
    %endcase 'env'
  %endswitch «message»/etag
%endfunction «fgeneratingmessagehandler»

%function «fblockedenter» ()
    %invokeproc «exitstack»!push (&«fblockedexit»)
%endfunction «fblockedenter»
%function «fblockedexit» ()
%endfunction «fblockedexit»
%function «fblockedmessagehandler» ({«args.self» «args.message»})
    %switch «message»/etag
      %case 'env'
	%overwrite «state» «args.message»/data
      %endcase 'env'
      %case 'resume'
	%mapfunctions «exitstack»
	%overwrite «state» 'generating'
	%invokefunction &«fgeneratingenter» ()
      %endcase 'resume'
    %endswitch «message»/etag
%endfunction «fblockedmessagehandler»

